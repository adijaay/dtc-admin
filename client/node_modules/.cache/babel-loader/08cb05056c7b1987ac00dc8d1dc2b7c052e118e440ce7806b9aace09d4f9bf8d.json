{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adiwi\\\\dtc-admin\\\\client\\\\src\\\\admin\\\\imageresize.js\",\n  _s = $RefreshSig$();\nimport ReactDOM from 'react-dom';\nimport React, { PureComponent, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport AvatarEditor from 'react-avatar-editor';\nimport Dropzone from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Crop() {\n  _s();\n  const [image, setImage] = useState('');\n  const cimage = useRef(null);\n  const [scale, setScale] = useState(1);\n  const handleGambardataChange = async e => {\n    const fileK = e.target.files[0];\n    const base64K = URL.createObjectURL(fileK);\n    // setChgambardata(fileK);\n    setImage(base64K);\n    console.log(image);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      required: true,\n      type: \"file\",\n      accept: \"image/*\",\n      name: \"gambardata\",\n      onChange: handleGambardataChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AvatarEditor, {\n      ref: cimage,\n      image: image,\n      width: 250,\n      height: 250,\n      border: 50,\n      color: [255, 255, 255, 0.6] // RGBA\n      ,\n      scale: scale,\n      rotate: 0,\n      style: {\n        backgroundColor: 'black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: 0.1,\n      max: 5,\n      step: 0.1,\n      value: scale,\n      onChange: e => setScale(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 13\n  }, this);\n}\n\n// import './App.css';\n\n// class Crop extends PureComponent {\n//   state = {\n//     src: null,\n//     crop: {\n//       unit: '%',\n//       width: 30,\n//       aspect: 16 / 9\n//     }\n//   };\n\n//   onSelectFile = (e) => {\n//     console.log(\"jalan\")\n//     if (e.target.files && e.target.files.length > 0) {\n//       const reader = new FileReader();\n//       reader.addEventListener('load', () =>\n//         this.setState({ src: reader.result })\n//       );\n//       reader.readAsDataURL(e.target.files[0]);\n//     }\n//   };\n\n//   // If you setState the crop in here you should return false.\n//   onImageLoaded = (image) => {\n//     this.imageRef = image;\n//   };\n\n//   onCropComplete = (crop) => {\n//     this.makeClientCrop(crop);\n//   };\n\n//   onCropChange = (crop, percentCrop) => {\n//     // You could also use percentCrop:\n//     // this.setState({ crop: percentCrop });\n//     this.setState({ crop });\n//   };\n\n//   async makeClientCrop(crop) {\n//     if (this.imageRef && crop.width && crop.height) {\n//       const croppedImageUrl = await this.getCroppedImg(\n//         this.imageRef,\n//         crop,\n//         'newFile.jpeg'\n//       );\n//       this.setState({ croppedImageUrl });\n//     }\n//   }\n\n//   getCroppedImg(image, crop, fileName) {\n//     const canvas = document.createElement('canvas');\n//     const pixelRatio = window.devicePixelRatio;\n//     const scaleX = image.naturalWidth / image.width;\n//     const scaleY = image.naturalHeight / image.height;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = crop.width * pixelRatio * scaleX;\n//     canvas.height = crop.height * pixelRatio * scaleY;\n\n//     ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//     ctx.imageSmoothingQuality = 'high';\n\n//     ctx.drawImage(\n//       image,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width * scaleX,\n//       crop.height * scaleY\n//     );\n\n//     return new Promise((resolve, reject) => {\n//       canvas.toBlob(\n//         (blob) => {\n//           if (!blob) {\n//             //reject(new Error('Canvas is empty'));\n//             console.error('Canvas is empty');\n//             return;\n//           }\n//           blob.name = fileName;\n//           window.URL.revokeObjectURL(this.fileUrl);\n//           this.fileUrl = window.URL.createObjectURL(blob);\n//           resolve(this.fileUrl);\n//         },\n//         'image/jpeg',\n//         1\n//       );\n//     });\n//   }\n\n//   render() {\n//     const { crop, croppedImageUrl, src } = this.state;\n\n//     return (\n//       <div className=\"App\">\n//         <div>\n//           <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\n//         </div>\n//         {src && (\n//           <ReactCrop\n//             src={src}\n//             crop={crop}\n//             ruleOfThirds\n//             onImageLoaded={this.onImageLoaded}\n//             onComplete={this.onCropComplete}\n//             onChange={this.onCropChange}\n//           />\n//         )}\n//         {croppedImageUrl && (\n//           <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n//         )}\n//       </div>\n//     );\n//   }\n// };\n\n// ReactDOM.render(<Crop />, document.getElementById('root'));\n_s(Crop, \"wqn2Ye/Nz+PqCkaGEZubdRCJ2rY=\");\n_c = Crop;\nvar _c;\n$RefreshReg$(_c, \"Crop\");","map":{"version":3,"names":["ReactDOM","React","PureComponent","useRef","useState","ReactCrop","AvatarEditor","Dropzone","Crop","image","setImage","cimage","scale","setScale","handleGambardataChange","e","fileK","target","files","base64K","URL","createObjectURL","console","log","backgroundColor","value"],"sources":["C:/Users/adiwi/dtc-admin/client/src/admin/imageresize.js"],"sourcesContent":["import ReactDOM from 'react-dom';\r\nimport React, { PureComponent, useRef, useState } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nexport default function Crop() {\r\n      const [image, setImage] = useState('');\r\n      const cimage = useRef(null);\r\n      const [scale, setScale] = useState(1);\r\n    \r\n      const handleGambardataChange = async (e) => {\r\n        const fileK = e.target.files[0];\r\n        const base64K = URL.createObjectURL(fileK);\r\n        // setChgambardata(fileK);\r\n        setImage(base64K);\r\n        \r\n        \r\n        console.log(image);\r\n    }\r\n      \r\n    \r\n        return (\r\n            <div>\r\n                    \r\n            <input required type='file' accept=\"image/*\" name=\"gambardata\" onChange={handleGambardataChange}></input>\r\n            \r\n            <AvatarEditor\r\n                ref={cimage}\r\n                image={image}\r\n                width={250}\r\n                height={250}\r\n                border={50}\r\n                color={[255, 255, 255, 0.6]} // RGBA\r\n                scale={scale}\r\n                rotate={0}\r\n                style={{backgroundColor: 'black'}}\r\n            />\r\n\r\n            <input type='range' min={0.1} max={5} step={0.1} value={scale} onChange={(e) => setScale(e.target.value)}></input>\r\n            \r\n            </div>\r\n            \r\n        )\r\n}\r\n\r\n// import './App.css';\r\n\r\n// class Crop extends PureComponent {\r\n//   state = {\r\n//     src: null,\r\n//     crop: {\r\n//       unit: '%',\r\n//       width: 30,\r\n//       aspect: 16 / 9\r\n//     }\r\n//   };\r\n\r\n//   onSelectFile = (e) => {\r\n//     console.log(\"jalan\")\r\n//     if (e.target.files && e.target.files.length > 0) {\r\n//       const reader = new FileReader();\r\n//       reader.addEventListener('load', () =>\r\n//         this.setState({ src: reader.result })\r\n//       );\r\n//       reader.readAsDataURL(e.target.files[0]);\r\n//     }\r\n//   };\r\n\r\n//   // If you setState the crop in here you should return false.\r\n//   onImageLoaded = (image) => {\r\n//     this.imageRef = image;\r\n//   };\r\n\r\n//   onCropComplete = (crop) => {\r\n//     this.makeClientCrop(crop);\r\n//   };\r\n\r\n//   onCropChange = (crop, percentCrop) => {\r\n//     // You could also use percentCrop:\r\n//     // this.setState({ crop: percentCrop });\r\n//     this.setState({ crop });\r\n//   };\r\n\r\n//   async makeClientCrop(crop) {\r\n//     if (this.imageRef && crop.width && crop.height) {\r\n//       const croppedImageUrl = await this.getCroppedImg(\r\n//         this.imageRef,\r\n//         crop,\r\n//         'newFile.jpeg'\r\n//       );\r\n//       this.setState({ croppedImageUrl });\r\n//     }\r\n//   }\r\n\r\n//   getCroppedImg(image, crop, fileName) {\r\n//     const canvas = document.createElement('canvas');\r\n//     const pixelRatio = window.devicePixelRatio;\r\n//     const scaleX = image.naturalWidth / image.width;\r\n//     const scaleY = image.naturalHeight / image.height;\r\n//     const ctx = canvas.getContext('2d');\r\n\r\n//     canvas.width = crop.width * pixelRatio * scaleX;\r\n//     canvas.height = crop.height * pixelRatio * scaleY;\r\n\r\n//     ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n//     ctx.imageSmoothingQuality = 'high';\r\n\r\n//     ctx.drawImage(\r\n//       image,\r\n//       crop.x * scaleX,\r\n//       crop.y * scaleY,\r\n//       crop.width * scaleX,\r\n//       crop.height * scaleY,\r\n//       0,\r\n//       0,\r\n//       crop.width * scaleX,\r\n//       crop.height * scaleY\r\n//     );\r\n\r\n//     return new Promise((resolve, reject) => {\r\n//       canvas.toBlob(\r\n//         (blob) => {\r\n//           if (!blob) {\r\n//             //reject(new Error('Canvas is empty'));\r\n//             console.error('Canvas is empty');\r\n//             return;\r\n//           }\r\n//           blob.name = fileName;\r\n//           window.URL.revokeObjectURL(this.fileUrl);\r\n//           this.fileUrl = window.URL.createObjectURL(blob);\r\n//           resolve(this.fileUrl);\r\n//         },\r\n//         'image/jpeg',\r\n//         1\r\n//       );\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     const { crop, croppedImageUrl, src } = this.state;\r\n\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <div>\r\n//           <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\r\n//         </div>\r\n//         {src && (\r\n//           <ReactCrop\r\n//             src={src}\r\n//             crop={crop}\r\n//             ruleOfThirds\r\n//             onImageLoaded={this.onImageLoaded}\r\n//             onComplete={this.onCropComplete}\r\n//             onChange={this.onCropChange}\r\n//           />\r\n//         )}\r\n//         {croppedImageUrl && (\r\n//           <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// };\r\n\r\n// ReactDOM.render(<Crop />, document.getElementById('root'));\r\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAOC,KAAK,IAAIC,aAAa,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAO,qCAAqC;AAC5C,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,QAAQ,MAAM,gBAAgB;AAAC;AAEtC,eAAe,SAASC,IAAI,GAAG;EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMO,MAAM,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMU,sBAAsB,GAAG,MAAOC,CAAC,IAAK;IAC1C,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC/B,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACL,KAAK,CAAC;IAC1C;IACAN,QAAQ,CAACS,OAAO,CAAC;IAGjBG,OAAO,CAACC,GAAG,CAACd,KAAK,CAAC;EACtB,CAAC;EAGG,oBACI;IAAA,wBAEA;MAAO,QAAQ;MAAC,IAAI,EAAC,MAAM;MAAC,MAAM,EAAC,SAAS;MAAC,IAAI,EAAC,YAAY;MAAC,QAAQ,EAAEK;IAAuB;MAAA;MAAA;MAAA;IAAA,QAAS,eAEzG,QAAC,YAAY;MACT,GAAG,EAAEH,MAAO;MACZ,KAAK,EAAEF,KAAM;MACb,KAAK,EAAE,GAAI;MACX,MAAM,EAAE,GAAI;MACZ,MAAM,EAAE,EAAG;MACX,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE,CAAC;MAAA;MAC7B,KAAK,EAAEG,KAAM;MACb,MAAM,EAAE,CAAE;MACV,KAAK,EAAE;QAACY,eAAe,EAAE;MAAO;IAAE;MAAA;MAAA;MAAA;IAAA,QACpC,eAEF;MAAO,IAAI,EAAC,OAAO;MAAC,GAAG,EAAE,GAAI;MAAC,GAAG,EAAE,CAAE;MAAC,IAAI,EAAE,GAAI;MAAC,KAAK,EAAEZ,KAAM;MAAC,QAAQ,EAAGG,CAAC,IAAKF,QAAQ,CAACE,CAAC,CAACE,MAAM,CAACQ,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAE5G;AAGlB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,GA/JwBjB,IAAI;AAAA,KAAJA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}