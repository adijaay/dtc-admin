{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adiwi\\\\dtc-admin\\\\client\\\\src\\\\admin\\\\imageresize.js\",\n  _s = $RefreshSig$();\nimport ReactDOM, { render } from 'react-dom';\nimport React, { PureComponent, useRef, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport AvatarEditor from 'react-avatar-editor';\nimport Dropzone from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Crop = () => {\n  _s();\n  const [image, setImage] = useState('');\n  const cimage = useRef(null);\n  const [scale, setScale] = useState(1);\n  const handleGambardataChange = async e => {\n    const fileK = e.target.files[0];\n    const base64K = URL.createObjectURL(fileK);\n    // setChgambardata(fileK);\n    setImage(base64K);\n    console.log(image);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      required: true,\n      type: \"file\",\n      accept: \"image/*\",\n      name: \"gambardata\",\n      onChange: handleGambardataChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AvatarEditor, {\n      ref: cimage,\n      image: image,\n      width: 250,\n      height: 250,\n      border: 50,\n      color: [255, 255, 255, 0.6] // RGBA\n      ,\n      scale: scale,\n      rotate: 0,\n      style: {\n        backgroundColor: 'black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: 0.1,\n      max: 5,\n      step: 0.1,\n      value: scale,\n      onChange: e => setScale(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (this.cimage) {\n          // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\n          // drawn on another canvas, or added to the DOM.\n          const canvas = cimage.current.getImage();\n\n          // If you want the image resized to the canvas size (also a HTMLCanvasElement)\n          // const canvasScaled = cimage.current.getImageScaledToCanvas()\n        }\n      },\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 13\n  }, this);\n};\n_s(Crop, \"wqn2Ye/Nz+PqCkaGEZubdRCJ2rY=\");\n_c = Crop;\nexport default Crop;\nvar _c;\n$RefreshReg$(_c, \"Crop\");","map":{"version":3,"names":["ReactDOM","render","React","PureComponent","useRef","useState","ReactCrop","AvatarEditor","Dropzone","Crop","image","setImage","cimage","scale","setScale","handleGambardataChange","e","fileK","target","files","base64K","URL","createObjectURL","console","log","backgroundColor","value","canvas","current","getImage"],"sources":["C:/Users/adiwi/dtc-admin/client/src/admin/imageresize.js"],"sourcesContent":["import ReactDOM, { render } from 'react-dom';\r\nimport React, { PureComponent, useRef, useState } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nconst Crop = () => {\r\n      const [image, setImage] = useState('');\r\n      const cimage = useRef(null);\r\n      const [scale, setScale] = useState(1);\r\n    \r\n      const handleGambardataChange = async (e) => {\r\n        const fileK = e.target.files[0];\r\n        const base64K = URL.createObjectURL(fileK);\r\n        // setChgambardata(fileK);\r\n        setImage(base64K);\r\n        \r\n        \r\n        console.log(image);\r\n    };\r\n      \r\n        return (\r\n            <div>\r\n                    \r\n            <input required type='file' accept=\"image/*\" name=\"gambardata\" onChange={handleGambardataChange}></input>\r\n            \r\n            <AvatarEditor\r\n                ref={cimage}\r\n                image={image}\r\n                width={250}\r\n                height={250}\r\n                border={50}\r\n                color={[255, 255, 255, 0.6]} // RGBA\r\n                scale={scale}\r\n                rotate={0}\r\n                style={{backgroundColor: 'black'}}\r\n            />\r\n\r\n            <input type='range' min={0.1} max={5} step={0.1} value={scale} onChange={(e) => setScale(e.target.value)}></input>\r\n            \r\n            <button onClick={() => {\r\n                if (this.cimage) {\r\n                    // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                    // drawn on another canvas, or added to the DOM.\r\n                    const canvas = cimage.current.getImage()\r\n\r\n                    // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                    // const canvasScaled = cimage.current.getImageScaledToCanvas()\r\n                }\r\n            }}>Save</button>\r\n            </div>\r\n            \r\n        )\r\n}\r\n\r\nexport default Crop"],"mappings":";;AAAA,OAAOA,QAAQ,IAAIC,MAAM,QAAQ,WAAW;AAC5C,OAAOC,KAAK,IAAIC,aAAa,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAO,qCAAqC;AAC5C,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,QAAQ,MAAM,gBAAgB;AAAC;AAEtC,MAAMC,IAAI,GAAG,MAAM;EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMO,MAAM,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMU,sBAAsB,GAAG,MAAOC,CAAC,IAAK;IAC1C,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC/B,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACL,KAAK,CAAC;IAC1C;IACAN,QAAQ,CAACS,OAAO,CAAC;IAGjBG,OAAO,CAACC,GAAG,CAACd,KAAK,CAAC;EACtB,CAAC;EAEG,oBACI;IAAA,wBAEA;MAAO,QAAQ;MAAC,IAAI,EAAC,MAAM;MAAC,MAAM,EAAC,SAAS;MAAC,IAAI,EAAC,YAAY;MAAC,QAAQ,EAAEK;IAAuB;MAAA;MAAA;MAAA;IAAA,QAAS,eAEzG,QAAC,YAAY;MACT,GAAG,EAAEH,MAAO;MACZ,KAAK,EAAEF,KAAM;MACb,KAAK,EAAE,GAAI;MACX,MAAM,EAAE,GAAI;MACZ,MAAM,EAAE,EAAG;MACX,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE,CAAC;MAAA;MAC7B,KAAK,EAAEG,KAAM;MACb,MAAM,EAAE,CAAE;MACV,KAAK,EAAE;QAACY,eAAe,EAAE;MAAO;IAAE;MAAA;MAAA;MAAA;IAAA,QACpC,eAEF;MAAO,IAAI,EAAC,OAAO;MAAC,GAAG,EAAE,GAAI;MAAC,GAAG,EAAE,CAAE;MAAC,IAAI,EAAE,GAAI;MAAC,KAAK,EAAEZ,KAAM;MAAC,QAAQ,EAAGG,CAAC,IAAKF,QAAQ,CAACE,CAAC,CAACE,MAAM,CAACQ,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAS,eAElH;MAAQ,OAAO,EAAE,MAAM;QACnB,IAAI,IAAI,CAACd,MAAM,EAAE;UACb;UACA;UACA,MAAMe,MAAM,GAAGf,MAAM,CAACgB,OAAO,CAACC,QAAQ,EAAE;;UAExC;UACA;QACJ;MACJ,CAAE;MAAA,UAAC;IAAI;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACV;AAGlB,CAAC;AAAA,GA/CKpB,IAAI;AAAA,KAAJA,IAAI;AAiDV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}