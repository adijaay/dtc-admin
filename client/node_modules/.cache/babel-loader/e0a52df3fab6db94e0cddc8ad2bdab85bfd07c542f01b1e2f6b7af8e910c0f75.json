{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adiwi\\\\dtc-admin\\\\client\\\\src\\\\admin\\\\imageresize.js\",\n  _s = $RefreshSig$();\nimport ReactDOM from 'react-dom';\nimport React, { PureComponent, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport AvatarEditor from 'react-avatar-editor';\nimport Dropzone from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Crop() {\n  _s();\n  const [image, setImage] = useState('');\n  const [cimage, setCimage] = useState('');\n  const [scale, setScale] = useState(1);\n  const handleGambardataChange = async e => {\n    const fileK = e.target.files[0];\n    const base64K = URL.createObjectURL(fileK);\n    // setChgambardata(fileK);\n    setImage(base64K);\n    console.log(image);\n  };\n  const change = e => {\n    setCimage();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        required: true,\n        type: \"file\",\n        accept: \"image/*\",\n        name: \"gambardata\",\n        onChange: handleGambardataChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AvatarEditor, {\n        image: image,\n        width: 250,\n        height: 250,\n        border: 50,\n        color: [255, 255, 255, 0.6] // RGBA\n        ,\n        scale: scale,\n        rotate: 0,\n        style: {\n          backgroundColor: 'black'\n        },\n        onChange: change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: 0.1,\n        max: 5,\n        step: 0.1,\n        value: scale,\n        onChange: e => setScale(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 13\n  }, this);\n}\n\n// import './App.css';\n\n// class Crop extends PureComponent {\n//   state = {\n//     src: null,\n//     crop: {\n//       unit: '%',\n//       width: 30,\n//       aspect: 16 / 9\n//     }\n//   };\n\n//   onSelectFile = (e) => {\n//     console.log(\"jalan\")\n//     if (e.target.files && e.target.files.length > 0) {\n//       const reader = new FileReader();\n//       reader.addEventListener('load', () =>\n//         this.setState({ src: reader.result })\n//       );\n//       reader.readAsDataURL(e.target.files[0]);\n//     }\n//   };\n\n//   // If you setState the crop in here you should return false.\n//   onImageLoaded = (image) => {\n//     this.imageRef = image;\n//   };\n\n//   onCropComplete = (crop) => {\n//     this.makeClientCrop(crop);\n//   };\n\n//   onCropChange = (crop, percentCrop) => {\n//     // You could also use percentCrop:\n//     // this.setState({ crop: percentCrop });\n//     this.setState({ crop });\n//   };\n\n//   async makeClientCrop(crop) {\n//     if (this.imageRef && crop.width && crop.height) {\n//       const croppedImageUrl = await this.getCroppedImg(\n//         this.imageRef,\n//         crop,\n//         'newFile.jpeg'\n//       );\n//       this.setState({ croppedImageUrl });\n//     }\n//   }\n\n//   getCroppedImg(image, crop, fileName) {\n//     const canvas = document.createElement('canvas');\n//     const pixelRatio = window.devicePixelRatio;\n//     const scaleX = image.naturalWidth / image.width;\n//     const scaleY = image.naturalHeight / image.height;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = crop.width * pixelRatio * scaleX;\n//     canvas.height = crop.height * pixelRatio * scaleY;\n\n//     ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//     ctx.imageSmoothingQuality = 'high';\n\n//     ctx.drawImage(\n//       image,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width * scaleX,\n//       crop.height * scaleY\n//     );\n\n//     return new Promise((resolve, reject) => {\n//       canvas.toBlob(\n//         (blob) => {\n//           if (!blob) {\n//             //reject(new Error('Canvas is empty'));\n//             console.error('Canvas is empty');\n//             return;\n//           }\n//           blob.name = fileName;\n//           window.URL.revokeObjectURL(this.fileUrl);\n//           this.fileUrl = window.URL.createObjectURL(blob);\n//           resolve(this.fileUrl);\n//         },\n//         'image/jpeg',\n//         1\n//       );\n//     });\n//   }\n\n//   render() {\n//     const { crop, croppedImageUrl, src } = this.state;\n\n//     return (\n//       <div className=\"App\">\n//         <div>\n//           <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\n//         </div>\n//         {src && (\n//           <ReactCrop\n//             src={src}\n//             crop={crop}\n//             ruleOfThirds\n//             onImageLoaded={this.onImageLoaded}\n//             onComplete={this.onCropComplete}\n//             onChange={this.onCropChange}\n//           />\n//         )}\n//         {croppedImageUrl && (\n//           <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n//         )}\n//       </div>\n//     );\n//   }\n// };\n\n// ReactDOM.render(<Crop />, document.getElementById('root'));\n_s(Crop, \"uP1oMeecok050ZXxcYrYCQmU1TM=\");\n_c = Crop;\nvar _c;\n$RefreshReg$(_c, \"Crop\");","map":{"version":3,"names":["ReactDOM","React","PureComponent","useState","ReactCrop","AvatarEditor","Dropzone","Crop","image","setImage","cimage","setCimage","scale","setScale","handleGambardataChange","e","fileK","target","files","base64K","URL","createObjectURL","console","log","change","submit","backgroundColor","value"],"sources":["C:/Users/adiwi/dtc-admin/client/src/admin/imageresize.js"],"sourcesContent":["import ReactDOM from 'react-dom';\r\nimport React, { PureComponent, useState } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nexport default function Crop() {\r\n      const [image, setImage] = useState('');\r\n      const [cimage, setCimage] = useState('');\r\n      const [scale, setScale] = useState(1);\r\n    \r\n      const handleGambardataChange = async (e) => {\r\n        const fileK = e.target.files[0];\r\n        const base64K = URL.createObjectURL(fileK);\r\n        // setChgambardata(fileK);\r\n        setImage(base64K);\r\n        \r\n        \r\n        console.log(image);\r\n    }\r\n\r\n    const change = (e) => {\r\n        setCimage()\r\n    }\r\n      \r\n    \r\n        return (\r\n            <div>\r\n            <form onSubmit={submit}>\r\n                    \r\n            <input required type='file' accept=\"image/*\" name=\"gambardata\" onChange={handleGambardataChange}></input>\r\n            \r\n            <AvatarEditor\r\n                image={image}\r\n                width={250}\r\n                height={250}\r\n                border={50}\r\n                color={[255, 255, 255, 0.6]} // RGBA\r\n                scale={scale}\r\n                rotate={0}\r\n                style={{backgroundColor: 'black'}}\r\n                onChange={change}\r\n            />\r\n\r\n            <input type='range' min={0.1} max={5} step={0.1} value={scale} onChange={(e) => setScale(e.target.value)}></input>\r\n            <input type='submit'/>\r\n            </form>\r\n            </div>\r\n            \r\n        )\r\n}\r\n\r\n// import './App.css';\r\n\r\n// class Crop extends PureComponent {\r\n//   state = {\r\n//     src: null,\r\n//     crop: {\r\n//       unit: '%',\r\n//       width: 30,\r\n//       aspect: 16 / 9\r\n//     }\r\n//   };\r\n\r\n//   onSelectFile = (e) => {\r\n//     console.log(\"jalan\")\r\n//     if (e.target.files && e.target.files.length > 0) {\r\n//       const reader = new FileReader();\r\n//       reader.addEventListener('load', () =>\r\n//         this.setState({ src: reader.result })\r\n//       );\r\n//       reader.readAsDataURL(e.target.files[0]);\r\n//     }\r\n//   };\r\n\r\n//   // If you setState the crop in here you should return false.\r\n//   onImageLoaded = (image) => {\r\n//     this.imageRef = image;\r\n//   };\r\n\r\n//   onCropComplete = (crop) => {\r\n//     this.makeClientCrop(crop);\r\n//   };\r\n\r\n//   onCropChange = (crop, percentCrop) => {\r\n//     // You could also use percentCrop:\r\n//     // this.setState({ crop: percentCrop });\r\n//     this.setState({ crop });\r\n//   };\r\n\r\n//   async makeClientCrop(crop) {\r\n//     if (this.imageRef && crop.width && crop.height) {\r\n//       const croppedImageUrl = await this.getCroppedImg(\r\n//         this.imageRef,\r\n//         crop,\r\n//         'newFile.jpeg'\r\n//       );\r\n//       this.setState({ croppedImageUrl });\r\n//     }\r\n//   }\r\n\r\n//   getCroppedImg(image, crop, fileName) {\r\n//     const canvas = document.createElement('canvas');\r\n//     const pixelRatio = window.devicePixelRatio;\r\n//     const scaleX = image.naturalWidth / image.width;\r\n//     const scaleY = image.naturalHeight / image.height;\r\n//     const ctx = canvas.getContext('2d');\r\n\r\n//     canvas.width = crop.width * pixelRatio * scaleX;\r\n//     canvas.height = crop.height * pixelRatio * scaleY;\r\n\r\n//     ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n//     ctx.imageSmoothingQuality = 'high';\r\n\r\n//     ctx.drawImage(\r\n//       image,\r\n//       crop.x * scaleX,\r\n//       crop.y * scaleY,\r\n//       crop.width * scaleX,\r\n//       crop.height * scaleY,\r\n//       0,\r\n//       0,\r\n//       crop.width * scaleX,\r\n//       crop.height * scaleY\r\n//     );\r\n\r\n//     return new Promise((resolve, reject) => {\r\n//       canvas.toBlob(\r\n//         (blob) => {\r\n//           if (!blob) {\r\n//             //reject(new Error('Canvas is empty'));\r\n//             console.error('Canvas is empty');\r\n//             return;\r\n//           }\r\n//           blob.name = fileName;\r\n//           window.URL.revokeObjectURL(this.fileUrl);\r\n//           this.fileUrl = window.URL.createObjectURL(blob);\r\n//           resolve(this.fileUrl);\r\n//         },\r\n//         'image/jpeg',\r\n//         1\r\n//       );\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     const { crop, croppedImageUrl, src } = this.state;\r\n\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <div>\r\n//           <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\r\n//         </div>\r\n//         {src && (\r\n//           <ReactCrop\r\n//             src={src}\r\n//             crop={crop}\r\n//             ruleOfThirds\r\n//             onImageLoaded={this.onImageLoaded}\r\n//             onComplete={this.onCropComplete}\r\n//             onChange={this.onCropChange}\r\n//           />\r\n//         )}\r\n//         {croppedImageUrl && (\r\n//           <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// };\r\n\r\n// ReactDOM.render(<Crop />, document.getElementById('root'));\r\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAOC,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAO,qCAAqC;AAC5C,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,QAAQ,MAAM,gBAAgB;AAAC;AAEtC,eAAe,SAASC,IAAI,GAAG;EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMW,sBAAsB,GAAG,MAAOC,CAAC,IAAK;IAC1C,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC/B,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACL,KAAK,CAAC;IAC1C;IACAP,QAAQ,CAACU,OAAO,CAAC;IAGjBG,OAAO,CAACC,GAAG,CAACf,KAAK,CAAC;EACtB,CAAC;EAED,MAAMgB,MAAM,GAAIT,CAAC,IAAK;IAClBJ,SAAS,EAAE;EACf,CAAC;EAGG,oBACI;IAAA,uBACA;MAAM,QAAQ,EAAEc,MAAO;MAAA,wBAEvB;QAAO,QAAQ;QAAC,IAAI,EAAC,MAAM;QAAC,MAAM,EAAC,SAAS;QAAC,IAAI,EAAC,YAAY;QAAC,QAAQ,EAAEX;MAAuB;QAAA;QAAA;QAAA;MAAA,QAAS,eAEzG,QAAC,YAAY;QACT,KAAK,EAAEN,KAAM;QACb,KAAK,EAAE,GAAI;QACX,MAAM,EAAE,GAAI;QACZ,MAAM,EAAE,EAAG;QACX,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAE,CAAC;QAAA;QAC7B,KAAK,EAAEI,KAAM;QACb,MAAM,EAAE,CAAE;QACV,KAAK,EAAE;UAACc,eAAe,EAAE;QAAO,CAAE;QAClC,QAAQ,EAAEF;MAAO;QAAA;QAAA;QAAA;MAAA,QACnB,eAEF;QAAO,IAAI,EAAC,OAAO;QAAC,GAAG,EAAE,GAAI;QAAC,GAAG,EAAE,CAAE;QAAC,IAAI,EAAE,GAAI;QAAC,KAAK,EAAEZ,KAAM;QAAC,QAAQ,EAAGG,CAAC,IAAKF,QAAQ,CAACE,CAAC,CAACE,MAAM,CAACU,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QAAS,eAClH;QAAO,IAAI,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA;EACf;IAAA;IAAA;IAAA;EAAA,QACD;AAGlrKwBpB,IAAI;AAAA,KAAJA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}