{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adiwi\\\\dtc-admin\\\\client\\\\src\\\\admin\\\\imageresize.js\";\nimport ReactDOM from 'react-dom';\nimport React, { PureComponent, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport AvatarEditor from 'react-avatar-editor';\nimport Dropzone from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Crop() {\n  state = {\n    image: 'http://example.com/initialimage.jpg'\n  };\n  handleDrop = dropped => {\n    this.setState({\n      image: dropped[0]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Dropzone, {\n    onDrop: this.handleDrop,\n    noClick: true,\n    noKeyboard: true,\n    style: {\n      width: '250px',\n      height: '250px'\n    },\n    children: _ref => {\n      let {\n        getRootProps,\n        getInputProps\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ...getRootProps(),\n        children: [/*#__PURE__*/_jsxDEV(AvatarEditor, {\n          width: 250,\n          height: 250,\n          image: this.state.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 11\n  }, this);\n}\n\n// import './App.css';\n\n// class Crop extends PureComponent {\n//   state = {\n//     src: null,\n//     crop: {\n//       unit: '%',\n//       width: 30,\n//       aspect: 16 / 9\n//     }\n//   };\n\n//   onSelectFile = (e) => {\n//     console.log(\"jalan\")\n//     if (e.target.files && e.target.files.length > 0) {\n//       const reader = new FileReader();\n//       reader.addEventListener('load', () =>\n//         this.setState({ src: reader.result })\n//       );\n//       reader.readAsDataURL(e.target.files[0]);\n//     }\n//   };\n\n//   // If you setState the crop in here you should return false.\n//   onImageLoaded = (image) => {\n//     this.imageRef = image;\n//   };\n\n//   onCropComplete = (crop) => {\n//     this.makeClientCrop(crop);\n//   };\n\n//   onCropChange = (crop, percentCrop) => {\n//     // You could also use percentCrop:\n//     // this.setState({ crop: percentCrop });\n//     this.setState({ crop });\n//   };\n\n//   async makeClientCrop(crop) {\n//     if (this.imageRef && crop.width && crop.height) {\n//       const croppedImageUrl = await this.getCroppedImg(\n//         this.imageRef,\n//         crop,\n//         'newFile.jpeg'\n//       );\n//       this.setState({ croppedImageUrl });\n//     }\n//   }\n\n//   getCroppedImg(image, crop, fileName) {\n//     const canvas = document.createElement('canvas');\n//     const pixelRatio = window.devicePixelRatio;\n//     const scaleX = image.naturalWidth / image.width;\n//     const scaleY = image.naturalHeight / image.height;\n//     const ctx = canvas.getContext('2d');\n\n//     canvas.width = crop.width * pixelRatio * scaleX;\n//     canvas.height = crop.height * pixelRatio * scaleY;\n\n//     ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n//     ctx.imageSmoothingQuality = 'high';\n\n//     ctx.drawImage(\n//       image,\n//       crop.x * scaleX,\n//       crop.y * scaleY,\n//       crop.width * scaleX,\n//       crop.height * scaleY,\n//       0,\n//       0,\n//       crop.width * scaleX,\n//       crop.height * scaleY\n//     );\n\n//     return new Promise((resolve, reject) => {\n//       canvas.toBlob(\n//         (blob) => {\n//           if (!blob) {\n//             //reject(new Error('Canvas is empty'));\n//             console.error('Canvas is empty');\n//             return;\n//           }\n//           blob.name = fileName;\n//           window.URL.revokeObjectURL(this.fileUrl);\n//           this.fileUrl = window.URL.createObjectURL(blob);\n//           resolve(this.fileUrl);\n//         },\n//         'image/jpeg',\n//         1\n//       );\n//     });\n//   }\n\n//   render() {\n//     const { crop, croppedImageUrl, src } = this.state;\n\n//     return (\n//       <div className=\"App\">\n//         <div>\n//           <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\n//         </div>\n//         {src && (\n//           <ReactCrop\n//             src={src}\n//             crop={crop}\n//             ruleOfThirds\n//             onImageLoaded={this.onImageLoaded}\n//             onComplete={this.onCropComplete}\n//             onChange={this.onCropChange}\n//           />\n//         )}\n//         {croppedImageUrl && (\n//           <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n//         )}\n//       </div>\n//     );\n//   }\n// };\n\n// ReactDOM.render(<Crop />, document.getElementById('root'));\n_c = Crop;\nvar _c;\n$RefreshReg$(_c, \"Crop\");","map":{"version":3,"names":["ReactDOM","React","PureComponent","useState","ReactCrop","AvatarEditor","Dropzone","Crop","state","image","handleDrop","dropped","setState","width","height","getRootProps","getInputProps"],"sources":["C:/Users/adiwi/dtc-admin/client/src/admin/imageresize.js"],"sourcesContent":["import ReactDOM from 'react-dom';\r\nimport React, { PureComponent, useState } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nexport default function Crop() {\r\n    state = {\r\n        image: 'http://example.com/initialimage.jpg',\r\n      }\r\n    \r\n      handleDrop = (dropped) => {\r\n        this.setState({ image: dropped[0] })\r\n      }\r\n    \r\n        return (\r\n          <Dropzone\r\n            onDrop={this.handleDrop}\r\n            noClick\r\n            noKeyboard\r\n            style={{ width: '250px', height: '250px' }}\r\n          >\r\n            {({ getRootProps, getInputProps }) => (\r\n              <div {...getRootProps()}>\r\n                <AvatarEditor width={250} height={250} image={this.state.image} />\r\n                <input {...getInputProps()} />\r\n              </div>\r\n            )}\r\n          </Dropzone>\r\n        )\r\n}\r\n\r\n// import './App.css';\r\n\r\n// class Crop extends PureComponent {\r\n//   state = {\r\n//     src: null,\r\n//     crop: {\r\n//       unit: '%',\r\n//       width: 30,\r\n//       aspect: 16 / 9\r\n//     }\r\n//   };\r\n\r\n//   onSelectFile = (e) => {\r\n//     console.log(\"jalan\")\r\n//     if (e.target.files && e.target.files.length > 0) {\r\n//       const reader = new FileReader();\r\n//       reader.addEventListener('load', () =>\r\n//         this.setState({ src: reader.result })\r\n//       );\r\n//       reader.readAsDataURL(e.target.files[0]);\r\n//     }\r\n//   };\r\n\r\n//   // If you setState the crop in here you should return false.\r\n//   onImageLoaded = (image) => {\r\n//     this.imageRef = image;\r\n//   };\r\n\r\n//   onCropComplete = (crop) => {\r\n//     this.makeClientCrop(crop);\r\n//   };\r\n\r\n//   onCropChange = (crop, percentCrop) => {\r\n//     // You could also use percentCrop:\r\n//     // this.setState({ crop: percentCrop });\r\n//     this.setState({ crop });\r\n//   };\r\n\r\n//   async makeClientCrop(crop) {\r\n//     if (this.imageRef && crop.width && crop.height) {\r\n//       const croppedImageUrl = await this.getCroppedImg(\r\n//         this.imageRef,\r\n//         crop,\r\n//         'newFile.jpeg'\r\n//       );\r\n//       this.setState({ croppedImageUrl });\r\n//     }\r\n//   }\r\n\r\n//   getCroppedImg(image, crop, fileName) {\r\n//     const canvas = document.createElement('canvas');\r\n//     const pixelRatio = window.devicePixelRatio;\r\n//     const scaleX = image.naturalWidth / image.width;\r\n//     const scaleY = image.naturalHeight / image.height;\r\n//     const ctx = canvas.getContext('2d');\r\n\r\n//     canvas.width = crop.width * pixelRatio * scaleX;\r\n//     canvas.height = crop.height * pixelRatio * scaleY;\r\n\r\n//     ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n//     ctx.imageSmoothingQuality = 'high';\r\n\r\n//     ctx.drawImage(\r\n//       image,\r\n//       crop.x * scaleX,\r\n//       crop.y * scaleY,\r\n//       crop.width * scaleX,\r\n//       crop.height * scaleY,\r\n//       0,\r\n//       0,\r\n//       crop.width * scaleX,\r\n//       crop.height * scaleY\r\n//     );\r\n\r\n//     return new Promise((resolve, reject) => {\r\n//       canvas.toBlob(\r\n//         (blob) => {\r\n//           if (!blob) {\r\n//             //reject(new Error('Canvas is empty'));\r\n//             console.error('Canvas is empty');\r\n//             return;\r\n//           }\r\n//           blob.name = fileName;\r\n//           window.URL.revokeObjectURL(this.fileUrl);\r\n//           this.fileUrl = window.URL.createObjectURL(blob);\r\n//           resolve(this.fileUrl);\r\n//         },\r\n//         'image/jpeg',\r\n//         1\r\n//       );\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     const { crop, croppedImageUrl, src } = this.state;\r\n\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <div>\r\n//           <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\r\n//         </div>\r\n//         {src && (\r\n//           <ReactCrop\r\n//             src={src}\r\n//             crop={crop}\r\n//             ruleOfThirds\r\n//             onImageLoaded={this.onImageLoaded}\r\n//             onComplete={this.onCropComplete}\r\n//             onChange={this.onCropChange}\r\n//           />\r\n//         )}\r\n//         {croppedImageUrl && (\r\n//           <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// };\r\n\r\n// ReactDOM.render(<Crop />, document.getElementById('root'));\r\n"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAOC,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAO,qCAAqC;AAC5C,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,QAAQ,MAAM,gBAAgB;AAAC;AAEtC,eAAe,SAASC,IAAI,GAAG;EAC3BC,KAAK,GAAG;IACJC,KAAK,EAAE;EACT,CAAC;EAEDC,UAAU,GAAIC,OAAO,IAAK;IACxB,IAAI,CAACC,QAAQ,CAAC;MAAEH,KAAK,EAAEE,OAAO,CAAC,CAAC;IAAE,CAAC,CAAC;EACtC,CAAC;EAEC,oBACE,QAAC,QAAQ;IACP,MAAM,EAAE,IAAI,CAACD,UAAW;IACxB,OAAO;IACP,UAAU;IACV,KAAK,EAAE;MAAEG,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAA,UAE1C;MAAA,IAAC;QAAEC,YAAY;QAAEC;MAAc,CAAC;MAAA,oBAC/B;QAAA,GAASD,YAAY,EAAE;QAAA,wBACrB,QAAC,YAAY;UAAC,KAAK,EAAE,GAAI;UAAC,MAAM,EAAE,GAAI;UAAC,KAAK,EAAE,IAAI,CAACP,KAAK,CAACC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAG,eAClE;UAAA,GAAWO,aAAa;QAAE;UAAA;UAAA;UAAA;QAAA,QAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAC1B;IAAA;EACP;IAAA;IAAA;IAAA;EAAA,QACQ;AAErjJwBT,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}