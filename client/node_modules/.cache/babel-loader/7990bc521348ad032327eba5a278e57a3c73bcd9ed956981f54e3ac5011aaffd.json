{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adiwi\\\\dtc-admin\\\\client\\\\src\\\\admin\\\\imageresize.js\";\nimport ReactDOM from 'react-dom';\nimport React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    };\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg', 1);\n    });\n  }\n  render() {\n    const {\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: this.onSelectFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), src && /*#__PURE__*/_jsxDEV(ReactCrop, {\n        src: src,\n        crop: crop,\n        ruleOfThirds: true,\n        onImageLoaded: this.onImageLoaded,\n        onComplete: this.onCropComplete,\n        onChange: this.onCropChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), croppedImageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Crop\",\n        style: {\n          maxWidth: '100%'\n        },\n        src: croppedImageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n}\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 124,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"names":["ReactDOM","React","PureComponent","ReactCrop","App","state","src","crop","unit","width","aspect","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","pixelRatio","window","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","URL","revokeObjectURL","fileUrl","createObjectURL","render","maxWidth","getElementById"],"sources":["C:/Users/adiwi/dtc-admin/client/src/admin/imageresize.js"],"sourcesContent":["import ReactDOM from 'react-dom';\r\nimport React, { PureComponent } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\nimport './App.css';\r\n\r\nclass App extends PureComponent {\r\n  state = {\r\n    src: null,\r\n    crop: {\r\n      unit: '%',\r\n      width: 30,\r\n      aspect: 16 / 9\r\n    }\r\n  };\r\n\r\n  onSelectFile = (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener('load', () =>\r\n        this.setState({ src: reader.result })\r\n      );\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  // If you setState the crop in here you should return false.\r\n  onImageLoaded = (image) => {\r\n    this.imageRef = image;\r\n  };\r\n\r\n  onCropComplete = (crop) => {\r\n    this.makeClientCrop(crop);\r\n  };\r\n\r\n  onCropChange = (crop, percentCrop) => {\r\n    // You could also use percentCrop:\r\n    // this.setState({ crop: percentCrop });\r\n    this.setState({ crop });\r\n  };\r\n\r\n  async makeClientCrop(crop) {\r\n    if (this.imageRef && crop.width && crop.height) {\r\n      const croppedImageUrl = await this.getCroppedImg(\r\n        this.imageRef,\r\n        crop,\r\n        'newFile.jpeg'\r\n      );\r\n      this.setState({ croppedImageUrl });\r\n    }\r\n  }\r\n\r\n  getCroppedImg(image, crop, fileName) {\r\n    const canvas = document.createElement('canvas');\r\n    const pixelRatio = window.devicePixelRatio;\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = crop.width * pixelRatio * scaleX;\r\n    canvas.height = crop.height * pixelRatio * scaleY;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = 'high';\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      canvas.toBlob(\r\n        (blob) => {\r\n          if (!blob) {\r\n            //reject(new Error('Canvas is empty'));\r\n            console.error('Canvas is empty');\r\n            return;\r\n          }\r\n          blob.name = fileName;\r\n          window.URL.revokeObjectURL(this.fileUrl);\r\n          this.fileUrl = window.URL.createObjectURL(blob);\r\n          resolve(this.fileUrl);\r\n        },\r\n        'image/jpeg',\r\n        1\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { crop, croppedImageUrl, src } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\r\n        </div>\r\n        {src && (\r\n          <ReactCrop\r\n            src={src}\r\n            crop={crop}\r\n            ruleOfThirds\r\n            onImageLoaded={this.onImageLoaded}\r\n            onComplete={this.onCropComplete}\r\n            onChange={this.onCropChange}\r\n          />\r\n        )}\r\n        {croppedImageUrl && (\r\n          <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}