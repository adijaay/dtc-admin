{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adiwi\\\\dtc-admin\\\\client\\\\src\\\\admin\\\\imageresize.js\";\nimport React from 'react';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport ReactCrop from 'react-image-crop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Crop extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      src: null,\n      crop: {\n        unit: '%',\n        // Can be 'px' or '%'\n        x: 25,\n        y: 25,\n        width: 50,\n        height: 50,\n        aspect: 1 / 1\n      }\n    };\n    this.onImgChange = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n    this.onFileLoaded = image => {\n      this.imageRef = image;\n    };\n    this.onImgCropComp = crop => {\n      this.makeClientCrop(crop);\n    };\n    this.onImgCropChange = (crop, percentCrop) => {\n      console.log(\"change\");\n      this.setState({\n        crop\n      });\n    };\n  }\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const imgPath = await this.getResizeImage(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        imgPath\n      });\n    }\n  }\n  getResizeImage(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg', 1);\n    });\n  }\n  render() {\n    const {\n      crop,\n      imgPath,\n      src\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: this.onImgChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), src && /*#__PURE__*/_jsxDEV(ReactCrop, {\n        ruleOfThirds: true,\n        crop: crop,\n        onImageLoaded: this.onFileLoaded,\n        onChange: this.onImgCropChange,\n        onComplete: this.onImgCropComp,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: src,\n          style: {\n            width: '20vw'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }, this), imgPath && /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Crop\",\n        style: {\n          maxWidth: '400px'\n        },\n        src: imgPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this);\n  }\n}","map":{"version":3,"names":["React","ReactCrop","Crop","Component","state","src","crop","unit","x","y","width","height","aspect","onImgChange","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onFileLoaded","image","imageRef","onImgCropComp","makeClientCrop","onImgCropChange","percentCrop","console","log","imgPath","getResizeImage","fileName","canvas","document","createElement","pixelRatio","window","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","Promise","resolve","reject","toBlob","blob","error","name","URL","revokeObjectURL","fileUrl","createObjectURL","render","maxWidth"],"sources":["C:/Users/adiwi/dtc-admin/client/src/admin/imageresize.js"],"sourcesContent":["import React from 'react';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport ReactCrop from 'react-image-crop';\r\n\r\n\r\n\r\nexport default class Crop extends React.Component {\r\n    state = {\r\n        src: null,\r\n        crop: {\r\n            unit: '%', // Can be 'px' or '%'\r\n            x: 25,\r\n            y: 25,\r\n            width: 50,\r\n            height: 50,\r\n            aspect: 1/1\r\n        }\r\n      };\r\n    \r\n      onImgChange = (e) => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n          const reader = new FileReader();\r\n          reader.addEventListener('load', () =>\r\n            this.setState({ src: reader.result })\r\n          );\r\n          reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n      };\r\n    \r\n      onFileLoaded = (image) => {\r\n        this.imageRef = image;\r\n      };\r\n    \r\n      onImgCropComp = (crop) => {\r\n        this.makeClientCrop(crop);\r\n      };\r\n    \r\n      onImgCropChange = (crop, percentCrop) => {\r\n        console.log(\"change\")\r\n        this.setState({ crop });\r\n      };\r\n    \r\n      async makeClientCrop(crop) {\r\n        if (this.imageRef && crop.width && crop.height) {\r\n          const imgPath = await this.getResizeImage(\r\n            this.imageRef,\r\n            crop,\r\n            'newFile.jpeg'\r\n          );\r\n          this.setState({ imgPath });\r\n        }\r\n      }\r\n    \r\n      getResizeImage(image, crop, fileName) {\r\n        const canvas = document.createElement('canvas');\r\n        const pixelRatio = window.devicePixelRatio;\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        const ctx = canvas.getContext('2d');\r\n    \r\n        canvas.width = crop.width * pixelRatio * scaleX;\r\n        canvas.height = crop.height * pixelRatio * scaleY;\r\n    \r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        ctx.imageSmoothingQuality = 'high';\r\n    \r\n        ctx.drawImage(\r\n          image,\r\n          crop.x * scaleX,\r\n          crop.y * scaleY,\r\n          crop.width * scaleX,\r\n          crop.height * scaleY,\r\n          0,\r\n          0,\r\n          crop.width * scaleX,\r\n          crop.height * scaleY\r\n        );\r\n    \r\n        return new Promise((resolve, reject) => {\r\n          canvas.toBlob(\r\n            (blob) => {\r\n              if (!blob) {\r\n                //reject(new Error('Canvas is empty'));\r\n                console.error('Canvas is empty');\r\n                return;\r\n              }\r\n              blob.name = fileName;\r\n              window.URL.revokeObjectURL(this.fileUrl);\r\n              this.fileUrl = window.URL.createObjectURL(blob);\r\n              resolve(this.fileUrl);\r\n            },\r\n            'image/jpeg',\r\n            1\r\n          );\r\n        });\r\n      }\r\n    \r\n      render() {\r\n        const { crop, imgPath, src } = this.state;\r\n    \r\n        return (\r\n          <div className=\"App\">\r\n            <div>\r\n              <input type=\"file\" accept=\"image/*\" onChange={this.onImgChange} />\r\n            </div>\r\n            {src && (\r\n              <ReactCrop\r\n                ruleOfThirds\r\n                crop={crop}\r\n                onImageLoaded={this.onFileLoaded}\r\n                onChange={this.onImgCropChange}\r\n                onComplete={this.onImgCropComp}\r\n              >\r\n                <img src={src} style={{width: '20vw'}}/>\r\n              </ReactCrop>\r\n            )}\r\n            {imgPath && (\r\n              <img alt=\"Crop\" style={{ maxWidth: '400px' }} src={imgPath} />\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}